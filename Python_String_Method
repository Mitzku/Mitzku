poem_title = "spring storm"
poem_author = "William Car los Williams"

poem_title_fixed = poem_title.title()

print(poem_title)
print(poem_title_fixed)

poem_author_fixed = poem_author.upper()

print(poem_author)
print(poem_author_fixed)




line_one = "The sky has given over"

line_one_words = line_one.split()

print(line_one_words)



authors = "Audre Lorde, William Carlos Williams, Gabriela Mistral, Jean Toomer, An Qi, Walt Whitman, Shel Silverstein, Carmen Boullosa, Kamala Suraiyya, Langston Hughes, Adrienne Rich, Nikki Giovanni"

author_names = authors.split(',')

author_last_names = [name.split()[-1] for name in author_names]



spring_storm_text = \
"""The sky has given over 
its bitterness. 
of the overhanging embankment."""

spring_storm_lines = spring_storm_text.split('\n')

print(spring_storm_lines)


reapers_line_one_words = ["Black", "reapers", "with", "the", "sound", "of", "steel", "on", "stones"]

reapers_line_one = ' '.join(reapers_line_one_words)

print(reapers_line_one)




winter_trees_lines = ['All the complicated details', 'of the attiring and', 'the disattiring are completed!', 'A liquid moon', 'moves gently among', 'the long branches.', 'Thus having prepared their buds', 'against a sure winter', 'the wise trees', 'stand sleeping in the cold.']

winter_trees_full = '\n'.join(winter_trees_lines)
print(winter_trees_full)




love_maybe_lines = ['Always    ', '     in the middle of our bloodiest battles  ', 'you lay down your arms', '           like flowering mines    ','\n' ,'   to conquer me home.    ']

love_maybe_lines_stripped =[i.strip() for i in love_maybe_lines]

love_maybe_full = '\n'.join(love_maybe_lines_stripped)

print(love_maybe_full)




toomer_bio = \
"""
Nathan Pinchback Tomer, who adopted the name Jean Tomer early in his literary career, was born in Washington, D.C. in 1894. Jean is the son of Nathan Tomer was a mixed-race freedman, born into slavery in 1839 in Chatham County, North Carolina. Jean Tomer is most well known for his first book Cane, which vividly portrays the life of African-Americans in southern farmlands.
"""

toomer_bio_fixed = toomer_bio.replace('Tomer', 'Toomer')



god_wills_it_line_one = "The very earth will disown you"

disown_placement = god_wills_it_line_one.find('disown')

print(disown_placement)



def poem_title_card(poet, title):
  return "The poem \"{}\" is written by {}.".format(title, poet)
  
  
  
def poem_description(publishing_date, author, title, original_work):
  poem_desc = "The poem {title} by {author} was originally published in {original_work} in {publishing_date}.".format(publishing_date=publishing_date, author=author, title=title, original_work=original_work)
  return poem_desc

my_beard_description = poem_description("1974", "Shel Silverstein", "My Beard", "Where the Sidewalk Ends")




*Practice*


highlighted_poems = "Afterimages:Audre Lorde:1997,  The Shadow:William Carlos Williams:1915, Ecstasy:Gabriela Mistral:1925,   Georgia Dusk:Jean Toomer:1923,   Parting Before Daybreak:An Qi:2014, The Untold Want:Walt Whitman:1871, Mr. Grumpledump's Song:Shel Silverstein:2004, Angel Sound Mexico City:Carmen Boullosa:2013, In Love:Kamala Suraiyya:1965, Dream Variations:Langston Hughes:1994, Dreamwood:Adrienne Rich:1987"



highlighted_poems_list = highlighted_poems.split(',')

highlighted_poems_stripped = []
for i in highlighted_poems_list:
  highlighted_poems_stripped.append(i.strip())

highlighted_poems_details = []
for i in highlighted_poems_stripped:
  highlighted_poems_details.append(i.split(':'))

titles = []
poets = []
dates = []


for i in highlighted_poems_details:
  titles.append(i[0])
  poets.append(i[1])
  dates.append(i[2])


def poem_title_card(poets, titles, dates):
  return "The poem {} was published by {} in {}.".format(titles, poets, dates)

# Counting the number of unique characters

letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

def unique_english_letters(word):
  uniques = 0
  for letter in letters:
    if letter in word:
      uniques += 1
  return uniques

print(unique_english_letters("mississippi"))


# Counting a certain character in a word

def count_char_x(word, x):
  count = 0
  for letter in word:
    if x == letter:
      count += 1
  return count


  print(count_char_x("mississippi", "s"))


  print(len(mississippi.split('s')))


# finding the number of phrases within a string. This method splits the string and deducts 1 from the end

def count_multi_char_x(word, x):
  splits = word.split(x)
  return(len(splits)-1)

print(count_multi_char_x("mississippi", "iss"))


# an alternative neat solution

def count_multi_char_x(word, x):
  y = word.count(x)
  return y



# Identifying substrings between strings. This function should return the substring between the first occurrence of start and end in word. If start or end are not in word, the function should return word


def substring_between_letters(word, start, end):
  start_index = word.find(start)
  end_index = word.find(end)
  if word.count(start) > 0 and word.count(end) > 0:
    return word[start_index+1:end_index]
  else:
    return word


print(substring_between_letters("apple", "p", "e"))



# Checking if words in a sentence have a certain length

def x_length_words(sentence, x):
  sentence_split = sentence.split(' ')
  for word in sentence_split:
    if len(word) < x:
      return False
    else:
      return True


print(x_length_words("i like apples", 2))



# Check if a certain word appears in a string regardless of capitalization

def check_for_name(sentence, name):
  sentence_capitalized = sentence.upper()
  name_capitalized = name.upper()
  if sentence_capitalized.count(name_capitalized) > 0:
    return True
  return False


  def count_multi_char_x(word, x):
  splits = word.split(x)
  return(len(splits)-1)

print(count_multi_char_x("Gregor", "or"))
# should print 1

def substring_between_letters(word, start, end):
  start_index = word.find(start)
  end_index = word.find(end)
  if word.count(start) > 0 and word.count(end) > 0:
    return word[start_index+1:end_index]
  else:
    return word

# Uncomment these function calls to test your function:
print(substring_between_letters("apple", "p", "e"))
# should print "pl"



def check_for_name(sentence, name):
  sentence_capitalized = sentence.upper()
  name_capitalized = name.upper()
  if sentence_capitalized.count(name_capitalized) > 0:
    return True
  return False

# Uncomment these function calls to test your  function:
print(check_for_name("My name is Jamie", "Jamie"))
# should print True


def every_other_letter(word):
  output_string = ""
  for letter in range(len(word)):
    if letter % 2 == 0:
      output_string += word[letter]
  return output_string


print(every_other_letter("Codecademy"))
# should print Cdcdm


def reverse_string(word):
  output_string = ""
  a = -1
  for i in word:
    output_string += word[a]
    a = a - 1
  return output_string

# Uncomment these function calls to test your  function:
print(reverse_string("Codecademy"))
# should print ymedacedoC


def make_spoonerism(word1, word2):
  spooned_word1= word2[0] + word1[1:]
  spooned_word2= word1[0] + word2[1:]
  return "{} {}".format(spooned_word1, spooned_word2)



# Uncomment these function calls to test your function:
print(make_spoonerism("Codecademy", "Learn"))
# should print Lodecademy Cearn



def add_exclamation(word):
  if len(word)>20:
    return word
  else:
    while len(word)<20:
      word += "!"
    return word



# Uncomment these function calls to test your function:
print(add_exclamation("Codecademy"))
# should print Codecademy!!!!!!!!!!