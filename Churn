

Select *
From subscriptions
Limit 3;


-- 
Select Count (*)
From subscriptions
Where subscription_start < '2017-01-01'
	And subscription_end IS NULL; 
       
       
Select 1.0 * (
Select Count(*)
From subscriptions
Where subscription_start < '2017-01-01'
  And( subscription_end 
      between '2017-01-01' 
      AND '2017-01-31')
) / (
Select Count (*)
From subscriptions
Where subscription_start < '2017-01-01'
 And (
   (subscription_end >= '2017-01-01')
   Or (subscription_end IS NULL)
   )
)
as result;

  
  
  With enrollments As( 
  Select * 
  from subscriptions
  Where subscription_start < '2017-01-01'
  	And (subscription_end >= '2017-01-01'
        Or subscription_end IS NULL)
),
status As (
Select
	Case
		When subscription_end > '2017-01-31'
  	Or subscription_end IS NULL
  Then 0
  Else 1
  End as is_cancelled,
  Case
  	When subscription_start < '2017-01-01'
  	AND (subscription_end >= '2017-01-01')
  	OR (subscription_end IS NULL)
  	Then 1
  	Else 0
  	End as is_active
  From enrollments
  		 )      
Select 1.0 * Sum(is_cancelled) / Sum(is_active)
From status;


WITH months as
(SELECT
  '2017-01-01' as first_day,
  '2017-01-31' as last_day
UNION
SELECT
  '2017-02-01' as first_day,
  '2017-02-28' as last_day
UNION
SELECT
  '2017-03-01' as first_day,
  '2017-03-31' as last_day
)
SELECT *
FROM months;

WITH months AS
(SELECT
  '2017-01-01' as first_day,
  '2017-01-31' as last_day
UNION
SELECT
  '2017-02-01' as first_day,
  '2017-02-28' as last_day
UNION
SELECT
  '2017-03-01' as first_day,
  '2017-03-31' as last_day
),
cross_join as(
	Select *
	From subscriptions Cross Join months)
SELECT *
FROM cross_join
LIMIT 100;




*dropping it here*
With enrollments As( 
  Select * 
  from subscriptions
  Where subscription_start < '2017-01-01'
  	And (subscription_end >= '2017-01-01'
        Or subscription_end IS NULL)
),
status As (
Select
	Case
		When subscription_end > '2017-01-31'
  	Or subscription_end IS NULL
  Then 0
  Else 1
  End as is_cancelled,
  Case
  	When subscription_start < '2017-01-01'
  	AND (subscription_end >= '2017-01-01')
  	OR (subscription_end IS NULL)
  	Then 1
  	Else 0
  	End as is_active
  From enrollments
  		 )      
Select 1.0 * Sum(is_cancelled) / Sum(is_active)
From status;

With enrollments As( 
  Select * 
  from subscriptions
  Where subscription_start < '2017-01-01'
  	And (subscription_end >= '2017-01-01'
        Or subscription_end IS NULL)
)
Select id, subscription_start, subscription_end,
  Case
  	When subscription_start < '2017-01-01'
  	AND (subscription_end >= '2017-01-01')
  	OR (subscription_end IS NULL)
  	Then 1
  	Else 0
  	End as is_active
  From enrollments;
  
  
  
  
 WITH months AS
(SELECT
  '2017-01-01' as first_day,
  '2017-01-31' as last_day
UNION
SELECT
  '2017-02-01' as first_day,
  '2017-02-28' as last_day
UNION
SELECT
  '2017-03-01' as first_day,
  '2017-03-31' as last_day
),
cross_join AS
(SELECT *
FROM subscriptions
CROSS JOIN months),
status AS
(SELECT id, first_day as month,
CASE
  WHEN (subscription_start < first_day)
    AND (
      subscription_end > first_day
      OR subscription_end IS NULL
    ) THEN 1
  ELSE 0
END as is_active,
Case
   When subscription_end BETWEEN first_day AND last_day
   Then 1
   Else 0
   End as is_canceled
FROM cross_join)
SELECT *
FROM status
LIMIT 100;


* provide a list of months, with their corresponding number of 
active users at the beginning of the month and the number of those users who cancel during the month*



WITH months AS
(SELECT
  '2017-01-01' as first_day,
  '2017-01-31' as last_day
UNION
SELECT
  '2017-02-01' as first_day,
  '2017-02-28' as last_day
UNION
SELECT
  '2017-03-01' as first_day,
  '2017-03-31' as last_day
),
cross_join AS
(SELECT *
FROM subscriptions
CROSS JOIN months),
status AS
(SELECT id, first_day as month,
CASE
  WHEN (subscription_start < first_day)
    AND (
      subscription_end > first_day
      OR subscription_end IS NULL
    ) THEN 1
  ELSE 0
END as is_active,
CASE 
  WHEN subscription_end BETWEEN first_day AND last_day THEN 1
  ELSE 0
END as is_canceled
FROM cross_join),
status_aggregate AS
(SELECT
  month,
  SUM(is_active) as active,
  SUM(is_canceled) as canceled
FROM status
GROUP BY month)
Select month, 1.0 * canceled/active as churn_rate
From status_aggregate;
